...........................................................BLOCKCHAIN...............................................................



.........................................Assignment 3 : SMART CONTRACT NETWORK 1->Deposite 2->withdraw 3->show...................................

// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract SimpleBank {
    mapping(address => uint256) private balances;
    address owner;

    // Constructor is "payable" so it can receive ether,
    constructor() public payable {
        /* Set the owner to the creator of this contract */
        owner = msg.sender;
    }

    /// @notice Deposit ether into bank, requires method is "payable"
    /// @return The balance of the user after the deposit is made
    function deposit(uint256 depoamount) public payable returns (uint256) {
        balances[msg.sender] += depoamount;
        payable(msg.sender).transfer(depoamount);
        //emit LogDepositMade(msg.sender, msg.value);
        return balances[msg.sender];
    }

    /// @notice Withdraw ether from bank
    /// @return The balance remaining for the user
    function withdraw(uint256 withdrawAmount) public returns (uint256) {
        // Check enough balance available, otherwise just return balance
        if (withdrawAmount <= balances[msg.sender]) {
            balances[msg.sender] -= withdrawAmount;
            payable(msg.sender).transfer(withdrawAmount);
        }
        return balances[msg.sender];
    }

    function balance() public view returns (uint256) {
        return balances[msg.sender];
    }
}


.........................................Assignment 4 : Solidity to create student data............................................

//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.7.0 <0.9.0;

// Build the Contract
contract MarksManagmtSys {
    // Create a structure for
    // student details
    struct StudentStruct {
        uint256 ID;
        string fName;
        string lName;
        uint256 marks;
    }
    address owner;
    uint256 public stdCount = 0;
    //Create Array to store Student data
    StudentStruct[] stdRecords;

    constructor() {
        owner = msg.sender;
    }

    // Create a function to add
    // the new records
    function addNewRecords(
        uint256 _ID,
        string memory _fName,
        string memory _lName,
        uint256 _marks
    ) public payable {
        // Increase the count by 1
        stdCount = stdCount + 1;
        //Adding data into array
        stdRecords.push(StudentStruct(_ID, _fName, _lName, _marks));
    }

    function getAllRecords() public view returns (StudentStruct[] memory) {
        return stdRecords;
    }
}



..........................................Assignment 5 : Smart contract named my contract...........................................

// solidity program 
pragma solidity ^0.6.8;

contract MyContract
{
    address private owner;
    constructor() public{
        owner=msg.sender;
    }
    function getowner()
    public view returns (address){
            return owner;
    }
    function getBalance()
     public view returns (uint256){
             return owner.balance;
    }    
}



.........................................Assignment 6 : Addition.................................................

pragma solidity ^0.5.0;
contract SolidityTest{
    uint a = 100;
    uint b = 200;
    uint sum;
    function getResult() public returns(uint){
        sum =b+a;
        return sum;
    }
}
